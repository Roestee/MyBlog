// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.DataAccess.Concrete.EntityFrameworkCore.Context;

#nullable disable

namespace MyBlog.DataAccess.Migrations
{
    [DbContext(typeof(RoesteBlogDbContext))]
    [Migration("20240626124851_dbpdate-4")]
    partial class dbpdate4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyBlog.Entities.AboutMe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HomeId")
                        .IsUnique();

                    b.ToTable("AboutMes");
                });

            modelBuilder.Entity("MyBlog.Entities.ContactMe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CVUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HomeId")
                        .IsUnique();

                    b.ToTable("ContactMes");
                });

            modelBuilder.Entity("MyBlog.Entities.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AboutMeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AboutMeId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("MyBlog.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AboutMeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JobEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JobStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("StillWorking")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("AboutMeId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("MyBlog.Entities.Home", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Home");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.MyService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HomeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HomeId")
                        .IsUnique();

                    b.ToTable("MyServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HomeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.MyWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HomeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HomeId")
                        .IsUnique();

                    b.ToTable("MyWorks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HomeId = 1
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("MyServicesId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MyServicesId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("MyBlog.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AboutMeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutMeId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("MyBlog.Entities.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactMeId")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ContactMeId");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("MyBlog.Entities.Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeId")
                        .HasColumnType("int");

                    b.Property<string>("JobPosition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HomeId")
                        .IsUnique();

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("MyBlog.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2024, 6, 26, 15, 48, 50, 676, DateTimeKind.Local).AddTicks(2632),
                            Email = "admin@ibrahimcingi.com",
                            IsActive = true,
                            PasswordHash = new byte[] { 72, 250, 197, 191, 108, 92, 85, 121, 141, 83, 21, 219, 46, 136, 58, 16, 170, 84, 137, 71, 0, 215, 220, 83, 80, 178, 224, 45, 218, 33, 99, 231, 255, 70, 113, 246, 2, 118, 197, 80, 44, 29, 16, 107, 179, 161, 118, 155, 32, 193, 165, 48, 192, 57, 164, 11, 161, 28, 222, 241, 71, 189, 63, 232 },
                            PasswordSalt = new byte[] { 247, 111, 204, 171, 151, 175, 147, 147, 1, 18, 123, 244, 119, 106, 9, 41, 133, 85, 16, 165, 233, 152, 247, 99, 151, 45, 11, 243, 104, 72, 212, 106, 139, 206, 20, 251, 188, 179, 217, 16, 88, 141, 210, 142, 70, 122, 133, 37, 74, 196, 66, 192, 62, 98, 9, 235, 225, 100, 254, 44, 221, 255, 164, 98, 174, 229, 237, 36, 12, 81, 98, 126, 242, 95, 90, 144, 189, 82, 171, 215, 101, 42, 159, 180, 111, 233, 21, 11, 237, 128, 133, 139, 66, 157, 136, 86, 179, 199, 96, 147, 249, 151, 12, 86, 160, 102, 106, 63, 28, 213, 222, 31, 55, 177, 244, 180, 234, 130, 242, 22, 15, 4, 234, 45, 122, 226, 75, 59 },
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2024, 6, 26, 15, 48, 50, 676, DateTimeKind.Local).AddTicks(2636),
                            Email = "test@ibrahimcingi.com",
                            IsActive = true,
                            PasswordHash = new byte[] { 132, 22, 240, 90, 129, 10, 86, 22, 208, 225, 83, 252, 220, 81, 28, 250, 59, 184, 21, 13, 107, 135, 137, 43, 50, 160, 48, 192, 24, 221, 95, 53, 170, 152, 34, 233, 179, 135, 232, 66, 239, 199, 148, 130, 65, 20, 80, 246, 198, 119, 97, 138, 9, 161, 12, 224, 119, 67, 201, 220, 234, 111, 212, 248 },
                            PasswordSalt = new byte[] { 240, 248, 28, 4, 33, 135, 108, 42, 188, 226, 143, 30, 232, 203, 233, 106, 163, 39, 20, 88, 172, 109, 77, 155, 23, 178, 15, 184, 62, 53, 156, 167, 179, 239, 49, 18, 94, 133, 199, 204, 50, 22, 187, 110, 120, 176, 27, 236, 138, 41, 172, 196, 249, 123, 225, 161, 182, 79, 78, 17, 193, 12, 146, 129, 48, 235, 70, 5, 9, 115, 108, 119, 189, 50, 43, 219, 165, 128, 38, 250, 30, 205, 221, 145, 105, 153, 35, 112, 162, 219, 242, 1, 9, 74, 111, 203, 83, 221, 159, 155, 68, 238, 6, 151, 88, 225, 17, 233, 248, 168, 24, 136, 105, 105, 242, 248, 203, 202, 237, 87, 119, 233, 147, 112, 41, 181, 193, 242 },
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("MyBlog.Entities.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundImgUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MyWorksId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WorkUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("MyWorksId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("MyBlog.Entities.AboutMe", b =>
                {
                    b.HasOne("MyBlog.Entities.Home", "Home")
                        .WithOne("AboutMe")
                        .HasForeignKey("MyBlog.Entities.AboutMe", "HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Home");
                });

            modelBuilder.Entity("MyBlog.Entities.ContactMe", b =>
                {
                    b.HasOne("MyBlog.Entities.Home", "Home")
                        .WithOne("ContactMe")
                        .HasForeignKey("MyBlog.Entities.ContactMe", "HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Home");
                });

            modelBuilder.Entity("MyBlog.Entities.Education", b =>
                {
                    b.HasOne("MyBlog.Entities.AboutMe", "AboutMe")
                        .WithMany("Educations")
                        .HasForeignKey("AboutMeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutMe");
                });

            modelBuilder.Entity("MyBlog.Entities.Experience", b =>
                {
                    b.HasOne("MyBlog.Entities.AboutMe", "AboutMe")
                        .WithMany("Experiences")
                        .HasForeignKey("AboutMeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutMe");
                });

            modelBuilder.Entity("MyBlog.Entities.MyService", b =>
                {
                    b.HasOne("MyBlog.Entities.Home", "Home")
                        .WithOne("MyService")
                        .HasForeignKey("MyBlog.Entities.MyService", "HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Home");
                });

            modelBuilder.Entity("MyBlog.Entities.MyWork", b =>
                {
                    b.HasOne("MyBlog.Entities.Home", "Home")
                        .WithOne("MyWork")
                        .HasForeignKey("MyBlog.Entities.MyWork", "HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Home");
                });

            modelBuilder.Entity("MyBlog.Entities.Service", b =>
                {
                    b.HasOne("MyBlog.Entities.MyService", "MyService")
                        .WithMany("Services")
                        .HasForeignKey("MyServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyService");
                });

            modelBuilder.Entity("MyBlog.Entities.Skill", b =>
                {
                    b.HasOne("MyBlog.Entities.AboutMe", "AboutMe")
                        .WithMany("Skills")
                        .HasForeignKey("AboutMeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutMe");
                });

            modelBuilder.Entity("MyBlog.Entities.SocialMedia", b =>
                {
                    b.HasOne("MyBlog.Entities.ContactMe", "ContactMe")
                        .WithMany("SocialMedias")
                        .HasForeignKey("ContactMeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactMe");
                });

            modelBuilder.Entity("MyBlog.Entities.Summary", b =>
                {
                    b.HasOne("MyBlog.Entities.Home", "Home")
                        .WithOne("Summary")
                        .HasForeignKey("MyBlog.Entities.Summary", "HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Home");
                });

            modelBuilder.Entity("MyBlog.Entities.User", b =>
                {
                    b.HasOne("MyBlog.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MyBlog.Entities.Work", b =>
                {
                    b.HasOne("MyBlog.Entities.MyWork", "MyWorks")
                        .WithMany("Works")
                        .HasForeignKey("MyWorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyWorks");
                });

            modelBuilder.Entity("MyBlog.Entities.AboutMe", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("MyBlog.Entities.ContactMe", b =>
                {
                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("MyBlog.Entities.Home", b =>
                {
                    b.Navigation("AboutMe");

                    b.Navigation("ContactMe");

                    b.Navigation("MyService");

                    b.Navigation("MyWork");

                    b.Navigation("Summary");
                });

            modelBuilder.Entity("MyBlog.Entities.MyService", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("MyBlog.Entities.MyWork", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("MyBlog.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
